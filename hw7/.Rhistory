nrow(file)
ncol(file)
head(file,1)
head(file)
file.head()
column_names = file.head()
column_names = file.head()
colnames(file)
str(file)
is.na(file)
is.na(file)
which(colSums(is.na(file)))
which(colSums(is.na(file)) >0)
which(colSums(is.na(file)) >0)
names(which(colSums(is.na(file)) >0))
file[ ,17]
file[ ,19]
file[ , -c(17,19)]
new_file <- file[ , -c(17,19)]
new_file <- file[ , -c(17,19)]
new_file <- file[ , -c(17,19)]
summary(new_file)
# which(colSums(is.na(file)) >0)
# names(which(colSums(is.na(file)) >0))
# Load your data if not already loaded
# file <- read.csv("your_file.csv")
# Check for missing values in columns and calculate percentage
missing_cols <- colSums(is.na(file)) > 0
cols_with_missing <- names(missing_cols[missing_cols])
missing_percentage <- colSums(is.na(file[cols_with_missing])) / nrow(file) * 100
# Display columns with missing values and their respective percentages
missing_info <- data.frame(Column = cols_with_missing, MissingPercentage = missing_percentage)
print(missing_info)
file[ , -c(17,19)]
#file[ , -c(17,19)]
# Drop rows with any missing values
file_no_missing <- file[complete.cases(file),]
# Print dimensions of the resulting dataset
print(dim(file_no_missing))
file[ , -c(17,19)]
#right skewed (first one?)
# Calculate mean
mean_value <- mean(new_file$num_card_inq_24_month, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_value <- mode_function(new_file$num_card_inq_24_month)
# Calculate median
median_value <- median(new_file$num_card_inq_24_month, na.rm = TRUE)
# Print mean, mode, and median
print(paste("Mean:", mean_value))
print(paste("Mode:", mode_value))
print(paste("Median:", median_value))
#right skewed (first one?)
# Calculate mean
mean_value <- mean(new_file$num_card_inq_24_month, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_value <- mode_function(new_file$num_card_inq_24_month)
# Calculate median
median_value <- median(new_file$num_card_inq_24_month, na.rm = TRUE)
# Print mean, mode, and median
print(paste("Mean of “num_card_inq_24_month”:", mean_value))
print(paste("Mode of “num_card_inq_24_month”:", mode_value))
print(paste("Median of “num_card_inq_24_month”:", median_value))
#right skewed (first one?)
# Calculate mean
mean_num_card_inq <- mean(new_file$num_card_inq_24_month, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_num_card_inq <- mode_function(new_file$num_card_inq_24_month)
# Calculate median
median_num_card_inq <- median(new_file$num_card_inq_24_month, na.rm = TRUE)
# Print mean, mode, and median for num_card_inq_24_month
print(paste("Mean for num_card_inq_24_month:", mean_num_card_inq))
print(paste("Mode for num_card_inq_24_month:", mode_num_card_inq))
print(paste("Median for num_card_inq_24_month:", median_num_card_inq))
#######################
# Calculate mean
mean_tot_amount_past_due <- mean(new_file$tot_amount_currently_past_due, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_tot_amount_past_due <- mode_function(new_file$tot_amount_currently_past_due)
# Calculate median
median_tot_amount_past_due <- median(new_file$tot_amount_currently_past_due, na.rm = TRUE)
# Print mean, mode, and median for tot_amount_currently_past_due
print(paste("Mean for tot_amount_currently_past_due:", mean_tot_amount_past_due))
print(paste("Mode for tot_amount_currently_past_due:", mode_tot_amount_past_due))
print(paste("Median for tot_amount_currently_past_due:", median_tot_amount_past_due))
#######################
# Calculate mean
mean_credit_age <- mean(new_file$credit_age, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_credit_age <- mode_function(new_file$credit_age)
# Calculate median
median_credit_age <- median(new_file$credit_age, na.rm = TRUE)
# Print mean, mode, and median for credit_age
print(paste("Mean for credit_age:", mean_credit_age))
print(paste("Mode for credit_age:", mode_credit_age))
print(paste("Median for credit_age:", median_credit_age))
#right skewed (first one?)
# Calculate mean
mean_num_card_inq <- mean(new_file$num_card_inq_24_month, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_num_card_inq <- mode_function(new_file$num_card_inq_24_month)
# Calculate median
median_num_card_inq <- median(new_file$num_card_inq_24_month, na.rm = TRUE)
# Print mean, mode, and median for num_card_inq_24_month
print(paste("Mean for num_card_inq_24_month:", mean_num_card_inq))
print(paste("Mode for num_card_inq_24_month:", mode_num_card_inq))
print(paste("Median for num_card_inq_24_month:", median_num_card_inq))
print("***********")
#######################
# Calculate mean
mean_tot_amount_past_due <- mean(new_file$tot_amount_currently_past_due, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_tot_amount_past_due <- mode_function(new_file$tot_amount_currently_past_due)
# Calculate median
median_tot_amount_past_due <- median(new_file$tot_amount_currently_past_due, na.rm = TRUE)
# Print mean, mode, and median for tot_amount_currently_past_due
print(paste("Mean for tot_amount_currently_past_due:", mean_tot_amount_past_due))
print(paste("Mode for tot_amount_currently_past_due:", mode_tot_amount_past_due))
print(paste("Median for tot_amount_currently_past_due:", median_tot_amount_past_due))
print("***********")
#######################
# Calculate mean
mean_credit_age <- mean(new_file$credit_age, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_credit_age <- mode_function(new_file$credit_age)
# Calculate median
median_credit_age <- median(new_file$credit_age, na.rm = TRUE)
# Print mean, mode, and median for credit_age
print(paste("Mean for credit_age:", mean_credit_age))
print(paste("Mode for credit_age:", mode_credit_age))
print(paste("Median for credit_age:", median_credit_age))
#right skewed (first one?)
# Calculate mean
mean_num_card_inq <- mean(new_file$num_card_inq_24_month, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_num_card_inq <- mode_function(new_file$num_card_inq_24_month)
# Calculate median
median_num_card_inq <- median(new_file$num_card_inq_24_month, na.rm = TRUE)
# Print mean, mode, and median for num_card_inq_24_month
print(paste("Mean for num_card_inq_24_month:", mean_num_card_inq))
print(paste("Mode for num_card_inq_24_month:", mode_num_card_inq))
print(paste("Median for num_card_inq_24_month:", median_num_card_inq))
print("num_card_inq_24_month has a right skewed shape")
print("***********")
#######################
# Calculate mean
mean_tot_amount_past_due <- mean(new_file$tot_amount_currently_past_due, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_tot_amount_past_due <- mode_function(new_file$tot_amount_currently_past_due)
# Calculate median
median_tot_amount_past_due <- median(new_file$tot_amount_currently_past_due, na.rm = TRUE)
# Print mean, mode, and median for tot_amount_currently_past_due
print(paste("Mean for tot_amount_currently_past_due:", mean_tot_amount_past_due))
print(paste("Mode for tot_amount_currently_past_due:", mode_tot_amount_past_due))
print(paste("Median for tot_amount_currently_past_due:", median_tot_amount_past_due))
print("tot_amount_currently_past_due has a right skewed shape")
print("***********")
#######################
# Calculate mean
mean_credit_age <- mean(new_file$credit_age, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_credit_age <- mode_function(new_file$credit_age)
# Calculate median
median_credit_age <- median(new_file$credit_age, na.rm = TRUE)
# Print mean, mode, and median for credit_age
print(paste("Mean for credit_age:", mean_credit_age))
print(paste("Mode for credit_age:", mode_credit_age))
print(paste("Median for credit_age:", median_credit_age))
print("credit_age has a right skewed shape")
# Set up the layout for the histograms
par(mfrow = c(1, 3))
# Plot histograms for each variable
hist(new_file$num_card_inq_24_month, main = "num_card_inq_24_month", xlab = "Values")
hist(new_file$tot_amount_currently_past_due, main = "tot_amount_currently_past_due", xlab = "Values")
hist(new_file$credit_age, main = "credit_age", xlab = "Values")
# Plotting a bar graph for Def_Ind column
barplot(table(new_file$Def_Ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# Plotting a bar graph for Def_Ind column
barplot((new_file$Def_Ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# Plotting a bar graph for Def_Ind column
barplot(table(new_file$Def_Ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# Plotting a bar graph for Def_Ind column
barplot(table(new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# Plotting a bar graph for Def_Ind column
#barplot(table(new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
barplot(new_file$Def_ind, main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# Plotting a bar graph for Def_Ind column
#barplot(table(new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# (table for categorical)
# Plotting a bar graph for rep_education column
barplot(table(new_file$rep_education), main = "Education Distribution", xlab = "Education Level", ylab = "Frequency")
# Plotting a histogram for rep_income variable
hist(new_file$rep_income, main = "Income Distribution", xlab = "Income")
# Plotting a histogram for rep_income variable
hist(table(new_file$rep_income), main = "Income Distribution", xlab = "Income")
# Plotting a histogram for rep_income variable
hist(table(new_file$rep_income), main = "Income Distribution", xlab = "Income")
# Convert "rep_income" column to numeric
new_file$rep_income <- as.numeric(new_file$rep_income)
# Convert "rep_income" column to numeric
new_file$rep_income <- as.numeric(new_file$rep_income)
# (table for categorical)
# Plotting a boxplot for tot_balance variable
boxplot(new_file$tot_balance, main = "Total Balance Boxplot", ylab = "Total Balance")
# (table for categorical)
# Plotting a boxplot for tot_balance variable
boxplot(new_file$tot_balance, main = "Total Balance Boxplot", ylab = "Total Balance")
# Calculate the five-number summary using quantile function
quantile(new_file$tot_balance, probs = c(0, 0.25, 0.5, 0.75, 1))
# # Convert "rep_income" column to numeric
# new_file$rep_income <- as.numeric(new_file$rep_income)
#
# # Plot histogram for rep_income variable
# hist(new_file$rep_income, main = "Income Distribution", xlab = "Income")
# Plotting a histogram for rep_income variable, considering missing values
hist(new_file$rep_income, main = "Income Distribution (with Missing Values)", xlab = "Income", ylab = "Frequency", na.rm = TRUE)
# Convert "rep_income" column to numeric, handling missing values
new_file$rep_income <- as.numeric(as.character(new_file$rep_income))
# Plotting a bar graph for Def_Ind column
#barplot(table(new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
#barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# Plotting a bar graph for Def_Ind column with adjusted transparency
barplot(table(new_file$Def_Ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency", col = "skyblue", alpha = 0.7)
# Plotting a bar graph for Def_Ind column
#barplot(table(new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
#barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# Plotting a bar graph for Def_Ind column with adjusted width and spacing
barplot(table(new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency", col = "skyblue", width = 0.5)
# Plotting a bar graph for Def_Ind column
#barplot(table(new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
#barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# Plotting a bar graph for Def_Ind column with adjusted width and spacing
barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency", col = "skyblue", width = 0.5)
# Plotting a bar graph for Def_Ind column
#barplot(table(new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
#barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# Plotting a bar graph for Def_Ind column with adjusted transparency
barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency", col = "skyblue", alpha = 0.7)
# Plotting a bar graph for Def_Ind column with adjusted width and spacing
barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency", col = "skyblue", width = 0.5)
# Plotting a bar graph for Def_Ind column
barplot(table(new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
#barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# # Plotting a bar graph for Def_Ind column with adjusted transparency
# barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency", col = "skyblue", alpha = 0.7)
#
# # Plotting a bar graph for Def_Ind column with adjusted width and spacing
# barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency", col = "skyblue", width = 0.5)
# Convert "rep_income" column to numeric, handling missing values
new_file$rep_income <- as.numeric(as.character(new_file$rep_income))
# Plotting a bar graph for Def_Ind column
barplot(table(new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
#barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# # Plotting a bar graph for Def_Ind column with adjusted transparency
# barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency", col = "skyblue", alpha = 0.7)
#
# # Plotting a bar graph for Def_Ind column with adjusted width and spacing
# barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency", col = "skyblue", width = 0.5)
# (table for categorical)
# Plotting a bar graph for rep_education column
#barplot(table(new_file$rep_education), main = "Education Distribution", xlab = "Education Level", ylab = "Frequency")
import pandas as pd
# Plotting a bar graph for Def_Ind column
barplot(table(new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
#barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency")
# # Plotting a bar graph for Def_Ind column with adjusted transparency
# barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency", col = "skyblue", alpha = 0.7)
#
# # Plotting a bar graph for Def_Ind column with adjusted width and spacing
# barplot((new_file$Def_ind), main = "Def_Ind Distribution", xlab = "Def_Ind", ylab = "Frequency", col = "skyblue", width = 0.5)
# (table for categorical)
# Plotting a bar graph for rep_education column
barplot(table(new_file$rep_education), main = "Education Distribution", xlab = "Education Level", ylab = "Frequency")
# # Convert "rep_income" column to numeric, handling missing values
# new_file$rep_income <- as.numeric(as.character(new_file$rep_income))
#
# # Plot histogram for rep_income variable, considering missing values
# hist(new_file$rep_income, main = "Income Distribution (with Missing Values)", xlab = "Income", ylab = "Frequency", na.rm = TRUE)
library(ggplot2)
ggplot(new_file,aes(x=rep_income))+ geom_histogram(fill='lightblue', color = 'black')+ labs(title= 'Histogram of Annual Income", x = "Income" , y = "Frequency" )
nrow(file)
ncol(file)
# # Convert "rep_income" column to numeric, handling missing values
# new_file$rep_income <- as.numeric(as.character(new_file$rep_income))
#
# # Plot histogram for rep_income variable, considering missing values
# hist(new_file$rep_income, main = "Income Distribution (with Missing Values)", xlab = "Income", ylab = "Frequency", na.rm = TRUE)
library(ggplot2)
#ggplot(new_file,aes(x=rep_income))+ geom_histogram(fill='lightblue', color = 'black') + labs(title = 'Histogram of Annual Income", x = "c" , y = "b")
library(ggplot2)
# Assuming 'rep_income' is a column in your data frame 'new_file'
# Replace 'your_data.csv' with your actual data source if loading from a CSV file
# new_file <- read.csv('your_data.csv')
# Plotting the histogram for the 'rep_income' column
ggplot(new_file, aes(x = rep_income)) +
geom_histogram(fill = 'lightblue', color = 'black') +
labs(title = 'Histogram of Annual Income', x = 'c', y = 'b')
# # Convert "rep_income" column to numeric, handling missing values
# new_file$rep_income <- as.numeric(as.character(new_file$rep_income))
#
# # Plot histogram for rep_income variable, considering missing values
# hist(new_file$rep_income, main = "Income Distribution (with Missing Values)", xlab = "Income", ylab = "Frequency", na.rm = TRUE)
# library(ggplot2)
#ggplot(new_file,aes(x=rep_income))+ geom_histogram(fill='lightblue', color = 'black') + labs(title = 'Histogram of Annual Income", x = "c" , y = "b")
install.packages('ggplot')
library(ggplot2)
# Assuming 'rep_income' is a column in your data frame 'new_file'
# Replace 'your_data.csv' with your actual data source if loading from a CSV file
# new_file <- read.csv('your_data.csv')
# Plotting the histogram for the 'rep_income' column
ggplot(new_file, aes(x = rep_income)) +
geom_histogram(fill = 'lightblue', color = 'black') +
labs(title = 'Histogram of Annual Income', x = 'c', y = 'b')
nrow(file)
ncol(file)
colnames(file)
str(file)
# which(colSums(is.na(file)) >0)
# names(which(colSums(is.na(file)) >0))
# Load your data if not already loaded
# file <- read.csv("your_file.csv")
# Check for missing values in columns and calculate percentage
missing_cols <- colSums(is.na(file)) > 0
cols_with_missing <- names(missing_cols[missing_cols])
missing_percentage <- colSums(is.na(file[cols_with_missing])) / nrow(file) * 100
# Display columns with missing values and their respective percentages
missing_info <- data.frame(Column = cols_with_missing, MissingPercentage = missing_percentage)
print(missing_info)
#right skewed (first one?)
# Calculate mean
mean_num_card_inq <- mean(new_file$num_card_inq_24_month, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_num_card_inq <- mode_function(new_file$num_card_inq_24_month)
# Calculate median
median_num_card_inq <- median(new_file$num_card_inq_24_month, na.rm = TRUE)
# Print mean, mode, and median for num_card_inq_24_month
print(paste("Mean for num_card_inq_24_month:", mean_num_card_inq))
print(paste("Mode for num_card_inq_24_month:", mode_num_card_inq))
print(paste("Median for num_card_inq_24_month:", median_num_card_inq))
print("num_card_inq_24_month has a right skewed shape")
print("***********")
#######################
# Calculate mean
mean_tot_amount_past_due <- mean(new_file$tot_amount_currently_past_due, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_tot_amount_past_due <- mode_function(new_file$tot_amount_currently_past_due)
# Calculate median
median_tot_amount_past_due <- median(new_file$tot_amount_currently_past_due, na.rm = TRUE)
# Print mean, mode, and median for tot_amount_currently_past_due
print(paste("Mean for tot_amount_currently_past_due:", mean_tot_amount_past_due))
print(paste("Mode for tot_amount_currently_past_due:", mode_tot_amount_past_due))
print(paste("Median for tot_amount_currently_past_due:", median_tot_amount_past_due))
print("tot_amount_currently_past_due has a right skewed shape")
print("***********")
#######################
# Calculate mean
mean_credit_age <- mean(new_file$credit_age, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_credit_age <- mode_function(new_file$credit_age)
# Calculate median
median_credit_age <- median(new_file$credit_age, na.rm = TRUE)
# Print mean, mode, and median for credit_age
print(paste("Mean for credit_age:", mean_credit_age))
print(paste("Mode for credit_age:", mode_credit_age))
print(paste("Median for credit_age:", median_credit_age))
print("credit_age has a right skewed shape")
#right skewed (first one?)
# Calculate mean
mean_num_card_inq <- mean(new_file$num_card_inq_24_month, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_num_card_inq <- mode_function(new_file$num_card_inq_24_month)
# Calculate median
median_num_card_inq <- median(new_file$num_card_inq_24_month, na.rm = TRUE)
# Print mean, mode, and median for num_card_inq_24_month
print(paste("Mean for num_card_inq_24_month:", mean_num_card_inq))
print(paste("Mode for num_card_inq_24_month:", mode_num_card_inq))
print(paste("Median for num_card_inq_24_month:", median_num_card_inq))
print("num_card_inq_24_month has a right skewed shape")
print("***********")
#######################
# Calculate mean
mean_tot_amount_past_due <- mean(new_file$tot_amount_currently_past_due, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_tot_amount_past_due <- mode_function(new_file$tot_amount_currently_past_due)
# Calculate median
median_tot_amount_past_due <- median(new_file$tot_amount_currently_past_due, na.rm = TRUE)
# Print mean, mode, and median for tot_amount_currently_past_due
print(paste("Mean for tot_amount_currently_past_due:", mean_tot_amount_past_due))
print(paste("Mode for tot_amount_currently_past_due:", mode_tot_amount_past_due))
print(paste("Median for tot_amount_currently_past_due:", median_tot_amount_past_due))
print("tot_amount_currently_past_due has a right skewed shape")
print("***********")
#######################
# Calculate mean
mean_credit_age <- mean(new_file$credit_age, na.rm = TRUE)
# Calculate mode (custom function)
mode_function <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode_credit_age <- mode_function(new_file$credit_age)
# Calculate median
median_credit_age <- median(new_file$credit_age, na.rm = TRUE)
# Print mean, mode, and median for credit_age
print(paste("Mean for credit_age:", mean_credit_age))
print(paste("Mode for credit_age:", mode_credit_age))
print(paste("Median for credit_age:", median_credit_age))
print("credit_age has a right skewed shape")
# Set up the layout for the histograms
par(mfrow = c(1, 3))
# Plot histograms for each variable
hist(new_file$num_card_inq_24_month, main = "num_card_inq_24_month", xlab = "Values")
hist(new_file$tot_amount_currently_past_due, main = "tot_amount_currently_past_due", xlab = "Values")
hist(new_file$credit_age, main = "credit_age", xlab = "Values")
new_file <- file[ , -c(17,19)]
summary(new_file)
# # Convert "rep_income" column to numeric, handling missing values
# new_file$rep_income <- as.numeric(as.character(new_file$rep_income))
#
# # Plot histogram for rep_income variable, considering missing values
# hist(new_file$rep_income, main = "Income Distribution (with Missing Values)", xlab = "Income", ylab = "Frequency", na.rm = TRUE)
# library(ggplot2)
#ggplot(new_file,aes(x=rep_income))+ geom_histogram(fill='lightblue', color = 'black') + labs(title = 'Histogram of Annual Income", x = "c" , y = "b")
install.packages('ggplot')
library(ggplot2)
# Assuming 'rep_income' is a column in your data frame 'new_file'
# Replace 'your_data.csv' with your actual data source if loading from a CSV file
# new_file <- read.csv('your_data.csv')
# Plotting the histogram for the 'rep_income' column
ggplot(new_file, aes(x = rep_income)) +
geom_histogram(fill = 'lightblue', color = 'black') +
labs(title = 'Histogram of Annual Income', x = 'c', y = 'b')
# # Convert "rep_income" column to numeric, handling missing values
# new_file$rep_income <- as.numeric(as.character(new_file$rep_income))
#
# # Plot histogram for rep_income variable, considering missing values
# hist(new_file$rep_income, main = "Income Distribution (with Missing Values)", xlab = "Income", ylab = "Frequency", na.rm = TRUE)
# library(ggplot2)
#ggplot(new_file,aes(x=rep_income))+ geom_histogram(fill='lightblue', color = 'black') + labs(title = 'Histogram of Annual Income", x = "c" , y = "b")
install.packages('ggplot')
library(ggplot2)
# Assuming 'rep_income' is a column in your data frame 'new_file'
# Replace 'your_data.csv' with your actual data source if loading from a CSV file
# new_file <- read.csv('your_data.csv')
# Plotting the histogram for the 'rep_income' column
ggplot(new_file, aes(x = rep_income)) +
geom_histogram() +
labs(title = 'Histogram of Annual Income', x = 'c', y = 'b')
