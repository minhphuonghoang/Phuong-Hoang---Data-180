graph2 <- ggplot(Mammals_Milk, aes(x = km_3, y = Protein, fill = km_3)) +
geom_boxplot() +
labs(title = "Protein Content by Cluster (K=3)", size = 12)
graph3 <- ggplot(Mammals_Milk, aes(x = km_3, y = Fat, fill = km_3)) +
geom_boxplot() +
labs(title = "Fat Content by Cluster (K=3)", size = 12)
graph4 <- ggplot(Mammals_Milk, aes(x = km_3, y = Lactose, fill = km_3)) +
geom_boxplot() +
labs(title = "Lactose Content by Cluster (K=3)", size = 12)
graph5 <- ggplot(Mammals_Milk, aes(x = km_3, y = Ash, fill = km_3)) +
geom_boxplot() +
labs(title = "Ash Content by Cluster (K=3)", size = 12)
# Arrange and display the boxplots side by side
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
# install.packages(('cowplot'))
library(ggplot2)
library(cowplot)
# Create ggplot objects for boxplots
graph1 <- ggplot(Mammals_Milk, aes(x = km_3, y = Water, fill = km_3)) +
geom_boxplot() +
labs(title = "Water Content by Cluster (K=3)", size = 10)
graph2 <- ggplot(Mammals_Milk, aes(x = km_3, y = Protein, fill = km_3)) +
geom_boxplot() +
labs(title = "Protein Content by Cluster (K=3)", size = 10)
graph3 <- ggplot(Mammals_Milk, aes(x = km_3, y = Fat, fill = km_3)) +
geom_boxplot() +
labs(title = "Fat Content by Cluster (K=3)", size = 10)
graph4 <- ggplot(Mammals_Milk, aes(x = km_3, y = Lactose, fill = km_3)) +
geom_boxplot() +
labs(title = "Lactose Content by Cluster (K=3)", size = 10)
graph5 <- ggplot(Mammals_Milk, aes(x = km_3, y = Ash, fill = km_3)) +
geom_boxplot() +
labs(title = "Ash Content by Cluster (K=3)", size = 10)
# Arrange and display the boxplots side by side
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
# install.packages(('cowplot'))
library(ggplot2)
library(cowplot)
# Create ggplot objects for boxplots
graph1 <- ggplot(Mammals_Milk, aes(x = km_3, y = Water, fill = km_3)) +
geom_boxplot() +
labs(title = "Water Content by Cluster (K=3)", size = 5)
graph2 <- ggplot(Mammals_Milk, aes(x = km_3, y = Protein, fill = km_3)) +
geom_boxplot() +
labs(title = "Protein Content by Cluster (K=3)", size = 5)
graph3 <- ggplot(Mammals_Milk, aes(x = km_3, y = Fat, fill = km_3)) +
geom_boxplot() +
labs(title = "Fat Content by Cluster (K=3)", size = 5)
graph4 <- ggplot(Mammals_Milk, aes(x = km_3, y = Lactose, fill = km_3)) +
geom_boxplot() +
labs(title = "Lactose Content by Cluster (K=3)", size = 5)
graph5 <- ggplot(Mammals_Milk, aes(x = km_3, y = Ash, fill = km_3)) +
geom_boxplot() +
labs(title = "Ash Content by Cluster (K=3)", size = 5)
# Arrange and display the boxplots side by side
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
# Set seed for reproducibility
set.seed(125)
# Create a vector to store WGSS values
wgss_values <- numeric()
# Loop through K values from 1 to 8
for (k in 1:8) {
# Perform k-means clustering
kmeans_result <- kmeans(Mammals_Milk_Std, centers = k, nstart = 50)
# Record WGSS
wgss_values[k] <- kmeans_result$tot.withinss
}
# Set seed for reproducibility
set.seed(125)
# Create a vector to store WGSS values
wgss_values <- numeric()
# Loop through K values from 1 to 8
for (k in 1:8) {
# Perform k-means clustering
kmeans_result <- kmeans(Mammals_Milk, centers = k, nstart = 50)
# Record WGSS
wgss_values[k] <- kmeans_result$tot.withinss
}
# Create a plot of WGSS by number of clusters
plot(1:8, wgss_values, type = "b", pch = 19, col = "blue", main = "WGSS by Number of Clusters",
xlab = "Number of Clusters (K)", ylab = "Within-Group Sum of Squares (WGSS)")
# Identify the point where the slope changes (elbow point)
elbow_point <- kmeans_result$k
# Add a vertical line at the elbow point
abline(v = elbow_point, col = "red", lty = 2)
# Print the elbow point
cat("Elbow Point (suggesting optimal K):", elbow_point, "\n")
# Create a vector to store WGSS values
wgss_values <- numeric()
# Loop through K values from 1 to 8
for (k in 1:8) {
# Perform k-means clustering
kmeans_result <- kmeans(Mammals_Milk, centers = k, nstart = 50)
# Record WGSS
wgss_values[k] <- kmeans_result$tot.withinss
}
# Create a plot of WGSS by number of clusters
plot(1:8, wgss_values, type = "b", pch = 19, col = "blue", main = "WGSS by Number of Clusters",
xlab = "Number of Clusters (K)", ylab = "Within-Group Sum of Squares (WGSS)")
# Identify the point where the slope changes (elbow point)
elbow_point <- kmeans_result$k
# Add a vertical line at the elbow point
abline(v = elbow_point, col = "red", lty = 2)
# Print the elbow point
cat("Elbow Point (suggesting optimal K):", elbow_point, "\n")
# Create a vector to store WGSS values
wgss_values <- numeric()
# Loop through K values from 1 to 8
for (k in 1:8) {
# Perform k-means clustering
kmeans_result <- kmeans(Mammals_Milk, centers = k, nstart = 50)
# Record WGSS
wgss_values[k] <- kmeans_result$tot.withinss
}
# Create a plot of WGSS by number of clusters
plot(1:8, wgss_values, type = "b", pch = 19, col = "blue", main = "WGSS by Number of Clusters",
xlab = "Number of Clusters (K)", ylab = "Within-Group Sum of Squares (WGSS)")
# Identify the point where the slope changes (elbow point)
elbow_point <- kmeans_result$k
# Add a vertical line at the elbow point
abline(v = elbow_point, col = "red", lty = 2)
# Create a vector to store WGSS values
wgss_values <- numeric()
# Loop through K values from 1 to 8
for (k in 1:8) {
# Perform k-means clustering
kmeans_result <- kmeans(Mammals_Milk, centers = k, nstart = 50)
# Record WGSS
wgss_values[k] <- kmeans_result$tot.withinss
}
# Create a plot of WGSS by number of clusters
plot(1:8, wgss_values, type = "b", pch = 19, col = "blue", main = "WGSS by Number of Clusters",
xlab = "Number of Clusters (K)", ylab = "Within-Group Sum of Squares (WGSS)")
# Identify the point where the slope changes (elbow point)
elbow_point <- kmeans_result$k
# Add a vertical line at the elbow point
abline(v = elbow_point, col = "red", lty = 2)
cat("Elbow Point (suggesting optimal K):", elbow_point, "\n")
# Create a vector to store WGSS values
wgss_values <- numeric()
# Loop through K values from 1 to 8
for (k in 1:8) {
# Perform k-means clustering
kmeans_result <- kmeans(Mammals_Milk, centers = k, nstart = 50)
# Record WGSS
wgss_values[k] <- kmeans_result$tot.withinss
}
# Create a plot of WGSS by number of clusters
plot(1:8, wgss_values, type = "b", pch = 19, col = "blue", main = "WGSS by Number of Clusters",
xlab = "Number of Clusters (K)", ylab = "Within-Group Sum of Squares (WGSS)")
# Identify the point where the slope changes (elbow point)
elbow_point <- kmeans_result$k
# Add a vertical line at the elbow point
abline(v = elbow_point, col = "red", lty = 2)
# Perform hierarchical clustering
milk_hclust <- hclust(dist(Mammals_Milk_Std, method = "euclidean"), method = "complete")
Mammals_Milk_Std<-round(scale(Mammals_Milk),2)
head(Mammals_Milk_Std)
# Perform hierarchical clustering
milk_hclust <- hclust(dist(Mammals_Milk_Std, method = "euclidean"), method = "complete")
# Set up and plot the dendrogram with specified parameters
plot(milk_hclust, labels = rownames(Mammals_Milk_Std), hang = -1, lwd = 3,
main = "Mammals Clustered by Std. Milk Composition \n Euclidean Metric, Complete Linkage",
sub = "", xlab = "Mammals", cex.lab = 1.25, frame.plot = TRUE)
set.seed(125)
# Why can't I do this with Mammals_Milk_Std?
# Perform k-means clustering for k=3
MMilk_km_3 <- kmeans(Mammals_Milk_Std, centers = 3, nstart = 100)
# Perform k-means clustering for k=4
MMilk_km_4 <- kmeans(Mammals_Milk_Std, centers = 4, nstart = 100)
# Append cluster membership vectors to the original data frame
Mammals_Milk_Std$km_3 <- MMilk_km_3$cluster
Mammals_Milk_Std$km_4 <- MMilk_km_4$cluster
# Sort the table based on km_3
sorted_table_km_3 <- arrange(Mammals_Milk_Std, km_3)
# Perform hierarchical clustering
milk_hclust <- hclust(dist(Mammals_Milk_Std, method = "euclidean"), method = "complete")
# Perform hierarchical clustering
milk_hclust <- hclust(dist(Mammals_Milk_Std, method = "euclidean")
# Set up and plot the dendrogram with specified parameters
plot(milk_hclust, labels = rownames(Mammals_Milk_Std), hang = -1, lwd = 3,
# Perform hierarchical clustering
milk_hclust <- hclust(dist(Mammals_Milk_Std, method = "euclidean"))
# Perform hierarchical clustering
milk_hclust <- hclust(dist(Mammals_Milk_Std))
Mammals_Milk_Std<-round(scale(Mammals_Milk),2)
head(Mammals_Milk_Std)
# Perform hierarchical clustering
milk_hclust<-hclust(dist(Mammals_Milk_Std))
# Set up and plot the dendrogram with specified parameters
plot(milk_hclust, labels = rownames(Mammals_Milk_Std), hang = -1, lwd = 3,
main = "Mammals Clustered by Std. Milk Composition \n Euclidean Metric, Complete Linkage",
sub = "", xlab = "Mammals", cex.lab = 1.25, frame.plot = TRUE)
# Perform hierarchical clustering
milk_hclust<-hclust(dist(Mammals_Milk_Std), method = 'euclidean')
# Perform hierarchical clustering
milk_hclust<-hclust(dist(Mammals_Milk_Std), method = 'Euclidean')
# Perform hierarchical clustering
milk_hclust<-hclust(dist(Mammals_Milk_Std), method = 'Euclidean')
# Perform hierarchical clustering
milk_hclust<-hclust(dist(Mammals_Milk_Std), method = 'euclidean')
# Perform hierarchical clustering
milk_hclust<-hclust(dist(Mammals_Milk_Std, method = 'euclidean'))
# Set up and plot the dendrogram with specified parameters
plot(milk_hclust, labels = rownames(Mammals_Milk_Std), hang = -1, lwd = 3,
main = "Mammals Clustered by Std. Milk Composition \n Euclidean Metric, Complete Linkage",
sub = "", xlab = "Mammals", cex.lab = 1.25, frame.plot = TRUE)
# Perform hierarchical clustering
milk_hclust<-hclust(dist(Mammals_Milk_Std, method = 'euclidean',linkage = 'complete'))
# Perform hierarchical clustering
milk_hclust<-hclust(dist(Mammals_Milk_Std, method = 'euclidean', linkage = 'complete'))
# Perform hierarchical clustering
milk_hclust<-hclust(dist(Mammals_Milk_Std, method = 'euclidean'), linkage = 'complete')
# Perform hierarchical clustering
milk_hclust<-hclust(dist(Mammals_Milk_Std, method = 'euclidean'), linkage = 'complete')
# Perform hierarchical clustering
milk_hclust<-hclust(dist(Mammals_Milk_Std, method = 'euclidean'))
# Set up and plot the dendrogram with specified parameters
plot(milk_hclust, labels = rownames(Mammals_Milk_Std), hang = -1, lwd = 3,
main = "Mammals Clustered by Std. Milk Composition \n Euclidean Metric, Complete Linkage",
sub = "", xlab = "Mammals", cex.lab = 1.25, frame.plot = TRUE)
set.seed(125)
# Why can't I do this with Mammals_Milk_Std?
# Perform k-means clustering for k=3
MMilk_km_3 <- kmeans(Mammals_Milk, centers = 3, nstart = 100)
# Perform k-means clustering for k=4
MMilk_km_4 <- kmeans(Mammals_Milk, centers = 4, nstart = 100)
# Append cluster membership vectors to the original data frame
Mammals_Milk$km_3 <- MMilk_km_3$cluster
Mammals_Milk$km_4 <- MMilk_km_4$cluster
# Sort the table based on km_3
sorted_table_km_3 <- arrange(Mammals_Milk, km_3)
library(dplyr)
set.seed(125)
# Why can't I do this with Mammals_Milk_Std?
# Perform k-means clustering for k=3
MMilk_km_3 <- kmeans(Mammals_Milk, centers = 3, nstart = 100)
# Perform k-means clustering for k=4
MMilk_km_4 <- kmeans(Mammals_Milk, centers = 4, nstart = 100)
# Append cluster membership vectors to the original data frame
Mammals_Milk$km_3 <- MMilk_km_3$cluster
Mammals_Milk$km_4 <- MMilk_km_4$cluster
# Sort the table based on km_3
sorted_table_km_3 <- arrange(Mammals_Milk, km_3)
# Sort the table based on km_4
sorted_table_km_4 <- arrange(Mammals_Milk, km_4)
# Print the sorted tables
print(sorted_table_km_3)
print(sorted_table_km_4)
library(dplyr)
set.seed(125)
# Create a summary table for K=3
MMilk_Agg_K3 <- Mammals_Milk %>%
group_by(km_3) %>%
summarize(
Count = n(),
Mean_Water = round(mean(Water), 2),
Mean_Protein = round(mean(Protein), 2),
Mean_Fat = round(mean(Fat), 2),
Mean_Lactose = round(mean(Lactose), 2),
Mean_Ash = round(mean(Ash), 2)
)
# Create a summary table for K=4
MMilk_Agg_K4 <- Mammals_Milk %>%
group_by(km_4) %>%
summarize(
Count = n(),
Mean_Water = round(mean(Water), 2),
Mean_Protein = round(mean(Protein), 2),
Mean_Fat = round(mean(Fat), 2),
Mean_Lactose = round(mean(Lactose), 2),
Mean_Ash = round(mean(Ash), 2)
)
# Print the summary tables
print("Summary Table for K=3:")
print(MMilk_Agg_K3)
print("Summary Table for K=4:")
print(MMilk_Agg_K4)
# install.packages(('cowplot'))
library(ggplot2)
library(cowplot)
# How do I adjust the size of the title to make it all fit?
# Create ggplot objects for boxplots
graph1 <- ggplot(Mammals_Milk, aes(x = km_3, y = Water, fill = km_3)) +
geom_boxplot() +
labs(title = "Water Content by Cluster (K=3)", size = 5)
graph2 <- ggplot(Mammals_Milk, aes(x = km_3, y = Protein, fill = km_3)) +
geom_boxplot() +
labs(title = "Protein Content by Cluster (K=3)", size = 5)
graph3 <- ggplot(Mammals_Milk, aes(x = km_3, y = Fat, fill = km_3)) +
geom_boxplot() +
labs(title = "Fat Content by Cluster (K=3)", size = 5)
graph4 <- ggplot(Mammals_Milk, aes(x = km_3, y = Lactose, fill = km_3)) +
geom_boxplot() +
labs(title = "Lactose Content by Cluster (K=3)", size = 5)
graph5 <- ggplot(Mammals_Milk, aes(x = km_3, y = Ash, fill = km_3)) +
geom_boxplot() +
labs(title = "Ash Content by Cluster (K=3)", size = 5)
# Arrange and display the boxplots side by side
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
# install.packages(('cowplot'))
library(ggplot2)
library(cowplot)
# How do I adjust the size of the title to make it all fit?
# Create ggplot objects for boxplots
graph1 <- ggplot(Mammals_Milk, aes(x = km_3, y = Water, fill = km_3)) +
geom_boxplot() +
labs(title = "Water Content by Cluster (K=3)")
graph2 <- ggplot(Mammals_Milk, aes(x = km_3, y = Protein, fill = km_3)) +
geom_boxplot() +
labs(title = "Protein Content by Cluster (K=3)")
graph3 <- ggplot(Mammals_Milk, aes(x = km_3, y = Fat, fill = km_3)) +
geom_boxplot() +
labs(title = "Fat Content by Cluster (K=3)")
graph4 <- ggplot(Mammals_Milk, aes(x = km_3, y = Lactose, fill = km_3)) +
geom_boxplot() +
labs(title = "Lactose Content by Cluster (K=3)")
graph5 <- ggplot(Mammals_Milk, aes(x = km_3, y = Ash, fill = km_3)) +
geom_boxplot() +
labs(title = "Ash Content by Cluster (K=3)")
# Arrange and display the boxplots side by side
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
# install.packages(('cowplot'))
library(ggplot2)
library(cowplot)
# How do I adjust the size of the title to make it all fit?
# Create ggplot objects for boxplots
graph1 <- ggplot(Mammals_Milk, aes(factor(km_3), y = Water)) +
geom_boxplot() +
labs(title = "Water Content by Cluster (K=3)")
graph2 <- ggplot(Mammals_Milk, aes(x = km_3, y = Protein, fill = km_3)) +
geom_boxplot() +
labs(title = "Protein Content by Cluster (K=3)")
graph3 <- ggplot(Mammals_Milk, aes(x = km_3, y = Fat, fill = km_3)) +
geom_boxplot() +
labs(title = "Fat Content by Cluster (K=3)")
graph4 <- ggplot(Mammals_Milk, aes(x = km_3, y = Lactose, fill = km_3)) +
geom_boxplot() +
labs(title = "Lactose Content by Cluster (K=3)")
graph5 <- ggplot(Mammals_Milk, aes(x = km_3, y = Ash, fill = km_3)) +
geom_boxplot() +
labs(title = "Ash Content by Cluster (K=3)")
# Arrange and display the boxplots side by side
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
# install.packages(('cowplot'))
library(ggplot2)
library(cowplot)
# How do I adjust the size of the title to make it all fit?
# Create ggplot objects for boxplots
graph1 <- ggplot(Mammals_Milk, aes(factor(km_3), y = Water)) +
geom_boxplot() +
labs(title = "Water Content by Cluster (K=3)")
graph2 <- ggplot(Mammals_Milk, aes(factor(km_3), y = Protein)) +
geom_boxplot() +
labs(title = "Protein Content by Cluster (K=3)")
graph3 <- ggplot(Mammals_Milk, aes(factor(km_3), y = Fat)) +
geom_boxplot() +
labs(title = "Fat Content by Cluster (K=3)")
graph4 <- ggplot(Mammals_Milk, aes(factor(km_3), y = Lactose)) +
geom_boxplot() +
labs(title = "Lactose Content by Cluster (K=3)")
graph5 <- ggplot(Mammals_Milk, aes(factor(km_3), y = Ash)) +
geom_boxplot() +
labs(title = "Ash Content by Cluster (K=3)")
# Arrange and display the boxplots side by side
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
# install.packages(('cowplot'))
library(ggplot2)
library(cowplot)
# How do I adjust the size of the title to make it all fit?
# Create ggplot objects for boxplots
graph1 <- ggplot(Mammals_Milk, aes(factor(km_3), y = Water)) +
geom_boxplot()
graph2 <- ggplot(Mammals_Milk, aes(factor(km_3), y = Protein)) +
geom_boxplot()
graph3 <- ggplot(Mammals_Milk, aes(factor(km_3), y = Fat)) +
geom_boxplot()
graph4 <- ggplot(Mammals_Milk, aes(factor(km_3), y = Lactose)) +
geom_boxplot()
graph5 <- ggplot(Mammals_Milk, aes(factor(km_3), y = Ash)) +
geom_boxplot()
# Arrange and display the boxplots side by side
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
# Create a vector to store WGSS values
wgss_values <- numeric()
# Loop through K values from 1 to 8
for (k in 1:8) {
# Perform k-means clustering
kmeans_result <- kmeans(Mammals_Milk, centers = k, nstart = 50)
# Record WGSS
wgss_values[k] <- kmeans_result$tot.withinss
}
# Create a plot of WGSS by number of clusters
plot(1:8, wgss_values, type = "b", pch = 19, col = "blue", main = "WGSS by Number of Clusters",
xlab = "Number of Clusters (K)", ylab = "Within-Group Sum of Squares (WGSS)")
# Identify the point where the slope changes (elbow point)
elbow_point <- kmeans_result$k
# Add a vertical line at the elbow point
abline(v = elbow_point, col = "red", lty = 2)
library(dplyr)
set.seed(125)
# Create a summary table for K=3
MMilk_Agg_K3 <- Mammals_Milk %>%
group_by(km_3) %>%
summarize(
Count = n(),
Mean_Water = round(mean(Water), 2),
Mean_Protein = round(mean(Protein), 2),
Mean_Fat = round(mean(Fat), 2),
Mean_Lactose = round(mean(Lactose), 2),
Mean_Ash = round(mean(Ash), 2)
)
# Create a summary table for K=4
MMilk_Agg_K4 <- Mammals_Milk %>%
group_by(km_4) %>%
summarize(
Count = n(),
Mean_Water = round(mean(Water), 2),
Mean_Protein = round(mean(Protein), 2),
Mean_Fat = round(mean(Fat), 2),
Mean_Lactose = round(mean(Lactose), 2),
Mean_Ash = round(mean(Ash), 2)
)
# Print the summary tables
print(MMilk_Agg_K3)
print(MMilk_Agg_K4)
library(dplyr)
set.seed(125)
# Perform k-means clustering for k=3
MMilk_km_3 <- kmeans(Mammals_Milk_Std, centers = 3, nstart = 100)
# Perform k-means clustering for k=4
MMilk_km_4 <- kmeans(Mammals_Milk_Std, centers = 4, nstart = 100)
# Append cluster membership vectors to the original data frame
Mammals_Milk$km_3 <- MMilk_km_3$cluster
Mammals_Milk$km_4 <- MMilk_km_4$cluster
# Sort the table based on km_3
sorted_table_km_3 <- arrange(Mammals_Milk, km_3)
# Sort the table based on km_4
sorted_table_km_4 <- arrange(Mammals_Milk, km_4)
# Print the sorted tables
print(sorted_table_km_3)
print(sorted_table_km_4)
library(dplyr)
set.seed(125)
# Perform k-means clustering for k=3
MMilk_km_3 <- kmeans(Mammals_Milk, centers = 3, nstart = 100)
# Perform k-means clustering for k=4
MMilk_km_4 <- kmeans(Mammals_Milk, centers = 4, nstart = 100)
# Append cluster membership vectors to the original data frame
Mammals_Milk$km_3 <- MMilk_km_3$cluster
Mammals_Milk$km_4 <- MMilk_km_4$cluster
# Sort the table based on km_3
sorted_table_km_3 <- arrange(Mammals_Milk, km_3)
# Sort the table based on km_4
sorted_table_km_4 <- arrange(Mammals_Milk, km_4)
# Print the sorted tables
print(sorted_table_km_3)
print(sorted_table_km_4)
# Custom options for knitting
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
fig.align = "center",
cache = FALSE
)
#library(tidyverse)
library(tm)
library(tidyverse)
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
#library(tidyverse)
library(tm)
packages.install('tm')
install.packages('tm')
library(tm)
install.packages('tm')
library(tm)
unique_years <- unique(as.integer(format(as.Date(news$date), "%Y")))
head('news')
head(news.csv)
#library(tidyverse)
library(tm)
# Store the 'headlines' column in a vector
charVector <- news$headlines
news <- read.csv("news.csv", header = TRUE)
library(tm)
# Calculate the total number of unique words that showed up in the data
total_unique_words <- length(wordCounts)
library("quanteda")
library("topicmodels")
# Assuming 'topic_model' is the object from the LDA analysis
# Get top 5 documents with highest gamma for each topic
top_docs_gamma <- textstat_summary(topic_model, statistic = "gamma", groups = "doc_id", n = 5)
#library(tidyverse)
library(tm)
library(tidyverse)
library(tm)
#library(tidyverse)
library(tm)
#library(tidyverse)
library(tm)
install.packages('tm')
library(tm)
install.packages('tm')
# library(tm)
# news<-read.csv("news.csv",header=T)
install.packages('tm')
# library(tm)
# news<-read.csv("news.csv",header=T)
#install.packages('tm')
#library(tidyverse)
library(tm)
